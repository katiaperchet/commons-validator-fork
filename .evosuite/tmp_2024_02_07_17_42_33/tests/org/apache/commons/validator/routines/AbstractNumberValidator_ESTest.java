/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 07 17:15:37 GMT 2024
 */

package org.apache.commons.validator.routines;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;
import org.apache.commons.validator.routines.BigDecimalValidator;
import org.apache.commons.validator.routines.BigIntegerValidator;
import org.apache.commons.validator.routines.ByteValidator;
import org.apache.commons.validator.routines.CurrencyValidator;
import org.apache.commons.validator.routines.DoubleValidator;
import org.apache.commons.validator.routines.IntegerValidator;
import org.apache.commons.validator.routines.LongValidator;
import org.apache.commons.validator.routines.ShortValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractNumberValidator_ESTest extends AbstractNumberValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator(false, 197);
      boolean boolean0 = doubleValidator0.minValue(2, 0);
      assertTrue(doubleValidator0.isAllowFractions());
      assertTrue(boolean0);
      assertEquals(197, doubleValidator0.getFormatType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LongValidator longValidator0 = LongValidator.getInstance();
      boolean boolean0 = longValidator0.maxValue(0, 2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = BigDecimalValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance();
      decimalFormat0.setMultiplier(2);
      int int0 = bigDecimalValidator0.determineScale(decimalFormat0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LongValidator longValidator0 = LongValidator.getInstance();
      Locale locale0 = Locale.GERMAN;
      Object object0 = longValidator0.parse("z%9~r(|pn`PL*0l", "z%9~r(|pn`PL*0l", locale0);
      assertEquals(0L, object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      boolean boolean0 = currencyValidator0.isAllowFractions();
      assertTrue(boolean0);
      assertEquals(1, currencyValidator0.getFormatType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator(false, 0);
      int int0 = bigIntegerValidator0.getFormatType();
      assertEquals(0, int0);
      assertFalse(bigIntegerValidator0.isAllowFractions());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator(false, (-2));
      int int0 = bigIntegerValidator0.getFormatType();
      assertEquals((-2), int0);
      assertFalse(bigIntegerValidator0.isAllowFractions());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = BigDecimalValidator.getInstance();
      Locale locale0 = new Locale("cX7\"*Az3T(", "cX7\"*Az3T(");
      DecimalFormat decimalFormat0 = (DecimalFormat)bigDecimalValidator0.getFormat(locale0);
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      
      decimalFormat0.applyLocalizedPattern("&Q]");
      int int0 = bigDecimalValidator0.determineScale(decimalFormat0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      Locale locale0 = new Locale("dhjK$");
      DecimalFormat decimalFormat0 = (DecimalFormat)doubleValidator0.getFormat("dhjK$", locale0);
      assertEquals(0, doubleValidator0.getFormatType());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseIntegerOnly());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LongValidator longValidator0 = new LongValidator();
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        longValidator0.parse("rkQN,a", "rkQN,a", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \"rkQN,a\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(false, (-2991));
      // Undeclared exception!
      try { 
        shortValidator0.minValue((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractNumberValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator(false, 1);
      // Undeclared exception!
      try { 
        integerValidator0.maxValue((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractNumberValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LongValidator longValidator0 = LongValidator.getInstance();
      // Undeclared exception!
      try { 
        longValidator0.isValid("<~.E[E!V<X!", "<~.E[E!V<X!", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed exponential pattern \"<~.E[E!V<X!\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigDecimalValidator0.isInRange(bigInteger0, (Number) null, bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractNumberValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(false, 2, false);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        bigDecimalValidator0.getFormat("org.apache.commons.validator.routines.PercentValidator", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \"org.apache.commons.validator.routines.PercentValidator\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      boolean boolean0 = shortValidator0.minValue(bigDecimal0, bigDecimal0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      boolean boolean0 = bigDecimalValidator0.minValue(bigDecimalValidator0.STANDARD_FORMAT, 1);
      assertTrue(bigDecimalValidator0.isAllowFractions());
      assertEquals(0, bigDecimalValidator0.getFormatType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      boolean boolean0 = bigDecimalValidator0.minValue(1, 1);
      assertEquals(0, bigDecimalValidator0.getFormatType());
      assertTrue(bigDecimalValidator0.isAllowFractions());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      boolean boolean0 = shortValidator0.maxValue(1, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      Long long0 = new Long(1L);
      boolean boolean0 = bigDecimalValidator0.maxValue(long0, 2);
      assertTrue(bigDecimalValidator0.isAllowFractions());
      assertTrue(boolean0);
      assertEquals(0, bigDecimalValidator0.getFormatType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = BigIntegerValidator.getInstance();
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      boolean boolean0 = bigIntegerValidator0.maxValue(bigDecimal0, bigInteger0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Locale locale0 = Locale.JAPAN;
      boolean boolean0 = integerValidator0.isValid("", "", locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = BigIntegerValidator.getInstance();
      boolean boolean0 = bigIntegerValidator0.isAllowFractions();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteValidator byteValidator0 = ByteValidator.getInstance();
      Byte byte0 = byteValidator0.validate("");
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator(true, 2);
      bigIntegerValidator0.validate((String) null);
      assertEquals(2, bigIntegerValidator0.getFormatType());
      assertFalse(bigIntegerValidator0.isAllowFractions());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      boolean boolean0 = shortValidator0.minValue(bigDecimal0, 2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      double[] doubleArray0 = new double[3];
      boolean boolean0 = bigIntegerValidator0.isInRange(doubleArray0[1], doubleArray0[1], doubleArray0[1]);
      assertTrue(boolean0);
      assertFalse(bigIntegerValidator0.isAllowFractions());
      assertEquals(0, bigIntegerValidator0.getFormatType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      boolean boolean0 = bigDecimalValidator0.maxValue(2, 0);
      assertTrue(bigDecimalValidator0.isAllowFractions());
      assertFalse(boolean0);
      assertEquals(0, bigDecimalValidator0.getFormatType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      DoubleValidator doubleValidator0 = new DoubleValidator(false, (-16));
      boolean boolean0 = doubleValidator0.isValid("0", "0", locale0);
      assertEquals((-16), doubleValidator0.getFormatType());
      assertTrue(boolean0);
      assertTrue(doubleValidator0.isAllowFractions());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteValidator byteValidator0 = ByteValidator.getInstance();
      boolean boolean0 = byteValidator0.isInRange(2, 1, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      Double double0 = doubleValidator0.validate("XQl^k>E,=gX=", "\u0001VOb~+s0");
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      Double double0 = doubleValidator0.validate("#$Q--VJ>ZC#{g|", "");
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(false, (-1112), false);
      bigDecimalValidator0.validate("sPczA5&dNa5");
      assertFalse(bigDecimalValidator0.isAllowFractions());
      assertEquals((-1112), bigDecimalValidator0.getFormatType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator(false, 2);
      Locale locale0 = Locale.FRANCE;
      integerValidator0.parse("#$Q--VJ>ZC#{g|", (String) null, locale0);
      assertEquals(2, integerValidator0.getFormatType());
      assertFalse(integerValidator0.isAllowFractions());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      currencyValidator0.validate("q");
      assertEquals(1, currencyValidator0.getFormatType());
      assertTrue(currencyValidator0.isAllowFractions());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(false, (-1112), false);
      Locale locale0 = Locale.forLanguageTag("org.apache.commons.validator.routines.AbstractNumberValidator");
      boolean boolean0 = bigDecimalValidator0.isValid("?H0>4kr0H'M", locale0);
      assertFalse(bigDecimalValidator0.isAllowFractions());
      assertEquals((-1112), bigDecimalValidator0.getFormatType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator(true, 2);
      boolean boolean0 = integerValidator0.isValid("#$Q--VJ>ZC#{g|");
      assertEquals(2, integerValidator0.getFormatType());
      assertFalse(boolean0);
      assertFalse(integerValidator0.isAllowFractions());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      Locale locale0 = Locale.JAPAN;
      currencyValidator0.validate("q", locale0);
      assertEquals(1, currencyValidator0.getFormatType());
      assertTrue(currencyValidator0.isAllowFractions());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = BigDecimalValidator.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      int int0 = bigDecimalValidator0.determineScale(decimalFormat0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      Locale locale0 = Locale.TAIWAN;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      numberFormat0.setParseIntegerOnly(true);
      int int0 = bigDecimalValidator0.determineScale(numberFormat0);
      assertTrue(bigDecimalValidator0.isAllowFractions());
      assertEquals(0, bigDecimalValidator0.getFormatType());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = BigIntegerValidator.getInstance();
      Locale locale0 = Locale.CHINA;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      int int0 = bigIntegerValidator0.determineScale(numberFormat0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      ByteValidator byteValidator0 = new ByteValidator(false, 0);
      int int0 = byteValidator0.determineScale(numberFormat0);
      assertFalse(byteValidator0.isAllowFractions());
      assertEquals(0, byteValidator0.getFormatType());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      // Undeclared exception!
      try { 
        bigDecimalValidator0.determineScale((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractNumberValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator(false, 5);
      int int0 = bigIntegerValidator0.getFormatType();
      assertFalse(bigIntegerValidator0.isAllowFractions());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = bigDecimalValidator0.isInRange(bigInteger0, bigInteger0, bigInteger0);
      assertTrue(boolean0);
      assertEquals(0, bigDecimalValidator0.getFormatType());
      assertTrue(bigDecimalValidator0.isAllowFractions());
  }
}
