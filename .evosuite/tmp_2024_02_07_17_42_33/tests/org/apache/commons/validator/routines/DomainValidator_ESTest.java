/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 07 16:46:47 GMT 2024
 */

package org.apache.commons.validator.routines;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.validator.routines.DomainValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DomainValidator_ESTest extends DomainValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_PLUS;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "@qvsGw<^G=p-Xy_YX";
      DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.ArrayType domainValidator_ArrayType1 = DomainValidator.ArrayType.GENERIC_MINUS;
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType1, stringArray0);
      linkedList0.add(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidTld("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_PLUS;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "(ivSt[ikn}[j";
      stringArray0[1] = "(ivSt[ikn}[j";
      stringArray0[2] = "U";
      stringArray0[3] = "(ivSt[ikn}[j";
      DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.ArrayType domainValidator_ArrayType1 = DomainValidator.ArrayType.COUNTRY_CODE_PLUS;
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType1, stringArray0);
      linkedList0.addFirst(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidTld("(ivSt[ikn}[j");
      assertTrue(boolean0);
      assertTrue(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_MINUS;
      String[] stringArray0 = new String[0];
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      domainValidator0.getOverrides(domainValidator_ArrayType0);
      assertTrue(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_MINUS;
      String[] stringArray0 = new String[0];
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      domainValidator0.getOverrides(domainValidator_ArrayType0);
      assertTrue(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = DomainValidator.unicodeToASCII((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = DomainValidator.unicodeToASCII("] is missing");
      assertEquals("] is missing", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = DomainValidator.unicodeToASCII("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(true);
      boolean boolean0 = domainValidator0.isValidInfrastructureTld("arpa");
      assertTrue(domainValidator0.isAllowLocal());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(true);
      boolean boolean0 = domainValidator0.isAllowLocal();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_PLUS;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "n-dj(";
      stringArray0[1] = "/CDE_NK<";
      DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(false, (List<DomainValidator.Item>) linkedList0);
      String[] stringArray1 = domainValidator0.getOverrides(domainValidator_ArrayType0);
      assertEquals(2, stringArray1.length);
      assertFalse(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      // Undeclared exception!
      try { 
        domainValidator0.isValidTld((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.DomainValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      // Undeclared exception!
      try { 
        domainValidator0.isValidLocalTld((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.DomainValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      // Undeclared exception!
      try { 
        domainValidator0.isValidInfrastructureTld((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.DomainValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      // Undeclared exception!
      try { 
        domainValidator0.isValidCountryCodeTld((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.DomainValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        DomainValidator.getTLDEntries((DomainValidator.ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.DomainValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(false, (List<DomainValidator.Item>) linkedList0);
      // Undeclared exception!
      try { 
        domainValidator0.getOverrides((DomainValidator.ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.DomainValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      boolean boolean0 = domainValidator0.isValidTld("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_PLUS;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidLocalTld("");
      assertTrue(domainValidator0.isAllowLocal());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      boolean boolean0 = domainValidator0.isValidLocalTld(">GArOg?a~vjaFX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_PLUS;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "xtinqYC,Y!j0si]Mb?";
      DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(false, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidGenericTld("");
      assertFalse(domainValidator0.isAllowLocal());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_PLUS;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "n-dj(";
      stringArray0[1] = "/CDE_NK<";
      DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(false, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidCountryCodeTld("/CDE_NK<");
      assertFalse(domainValidator0.isAllowLocal());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      boolean boolean0 = domainValidator0.isValidCountryCodeTld("mw");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      boolean boolean0 = domainValidator0.isValidCountryCodeTld("s:a");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      boolean boolean0 = domainValidator0.isValidDomainSyntax("desi");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      boolean boolean0 = domainValidator0.isValidDomainSyntax("org.apache.commons.validator.routines.RegexValidator");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(true);
      boolean boolean0 = domainValidator0.isValidDomainSyntax((String) null);
      assertFalse(boolean0);
      assertTrue(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(false);
      boolean boolean0 = domainValidator0.isValidDomainSyntax("");
      assertFalse(boolean0);
      assertFalse(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      boolean boolean0 = domainValidator0.isValidTld("jo");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(true);
      boolean boolean0 = domainValidator0.isValid(":V_Chp");
      assertFalse(boolean0);
      assertTrue(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(true);
      boolean boolean0 = domainValidator0.isValid("org.apache.commons.validator.routines.RegexValidator");
      assertFalse(boolean0);
      assertTrue(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(true);
      boolean boolean0 = domainValidator0.isValid((String) null);
      assertFalse(boolean0);
      assertTrue(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValid("nowtv");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_PLUS;
      String[] stringArray0 = domainValidator0.getOverrides(domainValidator_ArrayType0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(true);
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_MINUS;
      domainValidator0.getOverrides(domainValidator_ArrayType0);
      assertTrue(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_PLUS;
      String[] stringArray0 = domainValidator0.getOverrides(domainValidator_ArrayType0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_RO;
      DomainValidator domainValidator0 = DomainValidator.getInstance(false);
      // Undeclared exception!
      try { 
        domainValidator0.getOverrides(domainValidator_ArrayType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected enum value: LOCAL_RO
         //
         verifyException("org.apache.commons.validator.routines.DomainValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_RO;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      assertTrue(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_PLUS;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "a";
      stringArray0[1] = "a";
      stringArray0[2] = "a";
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.offerFirst(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      assertTrue(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "(ivSt[ikn}[j";
      stringArray0[1] = "(ivSt[ikn}[j";
      stringArray0[2] = "U";
      stringArray0[3] = "";
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_PLUS;
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.addFirst(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidTld("");
      assertTrue(boolean0);
      assertTrue(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_MINUS;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "bf";
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidCountryCodeTld("bf");
      assertTrue(domainValidator0.isAllowLocal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_MINUS;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "h[Z";
      stringArray0[2] = "fedex";
      stringArray0[3] = ".regexvalidator";
      stringArray0[4] = "U";
      stringArray0[5] = "sr";
      stringArray0[6] = " oE-98gH-FMM";
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidGenericTld("fedex");
      assertTrue(domainValidator0.isAllowLocal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_MINUS;
      String[] stringArray0 = new String[7];
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      // Undeclared exception!
      try { 
        DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.DomainValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_RO;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "kinder";
      stringArray0[3] = "3 N:he$4SJ{gM";
      stringArray0[4] = "p0/gFle";
      stringArray0[5] = "";
      // Undeclared exception!
      try { 
        DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot update the table: LOCAL_RO
         //
         verifyException("org.apache.commons.validator.routines.DomainValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_MINUS;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      DomainValidator.ArrayType domainValidator_ArrayType1 = DomainValidator.ArrayType.INFRASTRUCTURE_RO;
      // Undeclared exception!
      try { 
        DomainValidator.updateTLDOverride(domainValidator_ArrayType1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot update the table: INFRASTRUCTURE_RO
         //
         verifyException("org.apache.commons.validator.routines.DomainValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_RO;
      // Undeclared exception!
      try { 
        DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot update the table: COUNTRY_CODE_RO
         //
         verifyException("org.apache.commons.validator.routines.DomainValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_RO;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "<";
      stringArray0[1] = "a";
      stringArray0[2] = "#y;a5;su<7b<kL:xp";
      stringArray0[3] = "M?0:{+AwMX+d>^";
      stringArray0[4] = ".<ss-m'=g_lreq;";
      stringArray0[5] = ",";
      // Undeclared exception!
      try { 
        DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot update the table: GENERIC_RO
         //
         verifyException("org.apache.commons.validator.routines.DomainValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_MINUS;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "(ivSt[ikn}[j";
      stringArray0[1] = "(ivSt[ikn}[j";
      stringArray0[2] = "U";
      stringArray0[3] = "";
      DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      String[] stringArray1 = domainValidator0.getOverrides(domainValidator_ArrayType0);
      assertEquals(4, stringArray1.length);
      assertTrue(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_PLUS;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "xtinqYC,Y!j0si]Mb?";
      DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(false, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidTld("xtinqYC,Y!j0si]Mb?");
      assertTrue(boolean0);
      assertFalse(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "o";
      stringArray0[1] = "y)Wix'G{mTE-:Cqo7";
      stringArray0[2] = ".>garog?a~vjafx";
      stringArray0[3] = ",";
      stringArray0[4] = ".>garog?a~vjafx";
      stringArray0[5] = "s>BAN6C#<M]zK6A9";
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_MINUS;
      DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_PLUS;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "@qvsGw<^G=p-Xy_YX";
      DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      String[] stringArray1 = domainValidator0.getOverrides(domainValidator_ArrayType0);
      assertTrue(domainValidator0.isAllowLocal());
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_MINUS;
      String[] stringArray0 = new String[7];
      DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      // Undeclared exception!
      try { 
        DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can only invoke this method before calling getInstance
         //
         verifyException("org.apache.commons.validator.routines.DomainValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_PLUS;
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.DomainValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_RO;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      DomainValidator.ArrayType domainValidator_ArrayType1 = DomainValidator.ArrayType.LOCAL_MINUS;
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType1, stringArray0);
      linkedList0.add(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(false, (List<DomainValidator.Item>) linkedList0);
      assertFalse(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.INFRASTRUCTURE_RO;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_RO;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      DomainValidator.ArrayType domainValidator_ArrayType1 = DomainValidator.ArrayType.COUNTRY_CODE_PLUS;
      DomainValidator.updateTLDOverride(domainValidator_ArrayType1, stringArray0);
      assertEquals(1172, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_PLUS;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_MINUS;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.ArrayType domainValidator_ArrayType1 = DomainValidator.ArrayType.GENERIC_PLUS;
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType1, stringArray0);
      linkedList0.addLast(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(false, (List<DomainValidator.Item>) linkedList0);
      domainValidator0.getOverrides(domainValidator_ArrayType1);
      assertFalse(domainValidator0.isAllowLocal());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_PLUS;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_MINUS;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_PLUS;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_MINUS;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(true);
      // Undeclared exception!
      try { 
        domainValidator0.isValidGenericTld((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.DomainValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(false);
      boolean boolean0 = domainValidator0.isValid("");
      assertFalse(domainValidator0.isAllowLocal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidGenericTld(".regexvalidator");
      assertTrue(domainValidator0.isAllowLocal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      boolean boolean0 = domainValidator0.isAllowLocal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      boolean boolean0 = domainValidator0.isValidInfrastructureTld(">a=p|`");
      assertFalse(boolean0);
  }
}
