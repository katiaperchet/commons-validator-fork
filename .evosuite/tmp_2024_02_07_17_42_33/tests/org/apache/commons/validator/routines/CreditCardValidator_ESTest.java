/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 07 17:17:31 GMT 2024
 */

package org.apache.commons.validator.routines;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.validator.routines.CodeValidator;
import org.apache.commons.validator.routines.CreditCardValidator;
import org.apache.commons.validator.routines.checkdigit.CheckDigit;
import org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit;
import org.apache.commons.validator.routines.checkdigit.ISBNCheckDigit;
import org.apache.commons.validator.routines.checkdigit.ISINCheckDigit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CreditCardValidator_ESTest extends CreditCardValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange0 = new CreditCardValidator.CreditCardRange("", ">]=,/A:C0pM SBE:ar", 18, 18);
      boolean boolean0 = CreditCardValidator.validLength(18, creditCardValidator_CreditCardRange0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CreditCardValidator.CreditCardRange[] creditCardValidator_CreditCardRangeArray0 = new CreditCardValidator.CreditCardRange[6];
      int[] intArray0 = new int[5];
      intArray0[0] = 643;
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange0 = new CreditCardValidator.CreditCardRange("_Qv9", "_Qv9", intArray0);
      creditCardValidator_CreditCardRangeArray0[0] = creditCardValidator_CreditCardRange0;
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(creditCardValidator_CreditCardRangeArray0);
      // Undeclared exception!
      try { 
        creditCardValidator0.isValid("00");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.CreditCardValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CreditCardValidator.CreditCardRange[] creditCardValidator_CreditCardRangeArray0 = new CreditCardValidator.CreditCardRange[4];
      int[] intArray0 = new int[1];
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange0 = new CreditCardValidator.CreditCardRange("", "+B", intArray0);
      creditCardValidator_CreditCardRangeArray0[0] = creditCardValidator_CreditCardRange0;
      creditCardValidator_CreditCardRangeArray0[1] = creditCardValidator_CreditCardRange0;
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange1 = new CreditCardValidator.CreditCardRange("+B", "", (-128), 88);
      creditCardValidator_CreditCardRangeArray0[2] = creditCardValidator_CreditCardRange1;
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(creditCardValidator_CreditCardRangeArray0);
      boolean boolean0 = creditCardValidator0.isValid("99");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ISBNCheckDigit iSBNCheckDigit0 = new ISBNCheckDigit();
      CreditCardValidator.CreditCardRange[] creditCardValidator_CreditCardRangeArray0 = new CreditCardValidator.CreditCardRange[7];
      CodeValidator codeValidator0 = CreditCardValidator.createRangeValidator(creditCardValidator_CreditCardRangeArray0, iSBNCheckDigit0);
      assertEquals((-1), codeValidator0.getMaxLength());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        CreditCardValidator.validLength((-3765), (CreditCardValidator.CreditCardRange) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.CreditCardValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EAN13CheckDigit eAN13CheckDigit0 = (EAN13CheckDigit)EAN13CheckDigit.EAN13_CHECK_DIGIT;
      // Undeclared exception!
      try { 
        CreditCardValidator.createRangeValidator((CreditCardValidator.CreditCardRange[]) null, eAN13CheckDigit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.CreditCardValidator$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CreditCardValidator creditCardValidator0 = CreditCardValidator.genericCreditCardValidator(2046, (-2390));
      assertEquals(64L, CreditCardValidator.MASTERCARD_PRE_OCT2016);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CodeValidator[] codeValidatorArray0 = new CodeValidator[5];
      ISINCheckDigit iSINCheckDigit0 = new ISINCheckDigit();
      CodeValidator codeValidator0 = new CodeValidator("Card validators are missing", iSINCheckDigit0);
      codeValidatorArray0[0] = codeValidator0;
      codeValidatorArray0[1] = codeValidator0;
      CodeValidator codeValidator1 = new CodeValidator("", (-186), (-2090), (CheckDigit) null);
      codeValidatorArray0[2] = codeValidator1;
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(codeValidatorArray0);
      Object object0 = creditCardValidator0.validate("*EF+/<el0 O^0%R~7t");
      assertEquals("*EF+/<el0 O^0%R~7t", object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CodeValidator[] codeValidatorArray0 = new CodeValidator[5];
      ISINCheckDigit iSINCheckDigit0 = new ISINCheckDigit();
      CodeValidator codeValidator0 = new CodeValidator("Card validators are missing", iSINCheckDigit0);
      codeValidatorArray0[0] = codeValidator0;
      codeValidatorArray0[1] = codeValidator0;
      CodeValidator codeValidator1 = new CodeValidator("", (-186), (-2090), (CheckDigit) null);
      codeValidatorArray0[2] = codeValidator1;
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(codeValidatorArray0);
      boolean boolean0 = creditCardValidator0.isValid("Card validators are missing");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CreditCardValidator.CreditCardRange[] creditCardValidator_CreditCardRangeArray0 = new CreditCardValidator.CreditCardRange[6];
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange0 = new CreditCardValidator.CreditCardRange("_Qv9", "_Qv9", 0, 643);
      creditCardValidator_CreditCardRangeArray0[0] = creditCardValidator_CreditCardRange0;
      creditCardValidator_CreditCardRangeArray0[1] = creditCardValidator_CreditCardRange0;
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange1 = new CreditCardValidator.CreditCardRange("00", "00", (-140), 643);
      creditCardValidator_CreditCardRangeArray0[2] = creditCardValidator_CreditCardRange1;
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(creditCardValidator_CreditCardRangeArray0);
      boolean boolean0 = creditCardValidator0.isValid("00");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CodeValidator[] codeValidatorArray0 = new CodeValidator[4];
      CreditCardValidator.CreditCardRange[] creditCardValidator_CreditCardRangeArray0 = new CreditCardValidator.CreditCardRange[1];
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(codeValidatorArray0, creditCardValidator_CreditCardRangeArray0);
      boolean boolean0 = creditCardValidator0.isValid("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(1164L);
      boolean boolean0 = creditCardValidator0.isValid((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(1224L);
      Object object0 = creditCardValidator0.validate("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(1847L);
      assertEquals(8L, CreditCardValidator.DISCOVER);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CreditCardValidator creditCardValidator0 = null;
      try {
        creditCardValidator0 = new CreditCardValidator((CreditCardValidator.CreditCardRange[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Card ranges are missing
         //
         verifyException("org.apache.commons.validator.routines.CreditCardValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CodeValidator[] codeValidatorArray0 = new CodeValidator[2];
      CreditCardValidator creditCardValidator0 = null;
      try {
        creditCardValidator0 = new CreditCardValidator(codeValidatorArray0, (CreditCardValidator.CreditCardRange[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Card ranges are missing
         //
         verifyException("org.apache.commons.validator.routines.CreditCardValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CreditCardValidator.CreditCardRange[] creditCardValidator_CreditCardRangeArray0 = new CreditCardValidator.CreditCardRange[8];
      CreditCardValidator creditCardValidator0 = null;
      try {
        creditCardValidator0 = new CreditCardValidator((CodeValidator[]) null, creditCardValidator_CreditCardRangeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Card validators are missing
         //
         verifyException("org.apache.commons.validator.routines.CreditCardValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CreditCardValidator creditCardValidator0 = null;
      try {
        creditCardValidator0 = new CreditCardValidator((CodeValidator[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Card validators are missing
         //
         verifyException("org.apache.commons.validator.routines.CreditCardValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange0 = new CreditCardValidator.CreditCardRange("^(2221d{12})$", "^(2221d{12})$", (-1188), (-1188));
      boolean boolean0 = CreditCardValidator.validLength((-186), creditCardValidator_CreditCardRange0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange0 = new CreditCardValidator.CreditCardRange("bP}a~Q%['GoXgN", "bP}a~Q%['GoXgN", 7, (-1129));
      boolean boolean0 = CreditCardValidator.validLength((-1129), creditCardValidator_CreditCardRange0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[4];
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange0 = new CreditCardValidator.CreditCardRange("", "", intArray0);
      boolean boolean0 = CreditCardValidator.validLength(0, creditCardValidator_CreditCardRange0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CreditCardValidator.CreditCardRange[] creditCardValidator_CreditCardRangeArray0 = new CreditCardValidator.CreditCardRange[6];
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange0 = new CreditCardValidator.CreditCardRange("_Qv9", "_Qv9", 0, 643);
      creditCardValidator_CreditCardRangeArray0[0] = creditCardValidator_CreditCardRange0;
      creditCardValidator_CreditCardRangeArray0[1] = creditCardValidator_CreditCardRangeArray0[0];
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange1 = new CreditCardValidator.CreditCardRange("00", "00", (-140), 643);
      creditCardValidator_CreditCardRangeArray0[2] = creditCardValidator_CreditCardRange1;
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(creditCardValidator_CreditCardRangeArray0);
      Object object0 = creditCardValidator0.validate("00");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CreditCardValidator.CreditCardRange[] creditCardValidator_CreditCardRangeArray0 = new CreditCardValidator.CreditCardRange[6];
      int[] intArray0 = new int[5];
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange0 = new CreditCardValidator.CreditCardRange("_Qv9", "_Qv9", 0, 643);
      creditCardValidator_CreditCardRangeArray0[0] = creditCardValidator_CreditCardRange0;
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange1 = new CreditCardValidator.CreditCardRange("00", "_Qv9", intArray0);
      creditCardValidator_CreditCardRangeArray0[1] = creditCardValidator_CreditCardRange1;
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(creditCardValidator_CreditCardRangeArray0);
      // Undeclared exception!
      try { 
        creditCardValidator0.validate("00");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.CreditCardValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CodeValidator[] codeValidatorArray0 = new CodeValidator[4];
      CodeValidator codeValidator0 = CreditCardValidator.MASTERCARD_VALIDATOR;
      codeValidatorArray0[0] = codeValidator0;
      codeValidatorArray0[1] = codeValidator0;
      codeValidatorArray0[2] = codeValidator0;
      codeValidatorArray0[3] = codeValidatorArray0[0];
      CreditCardValidator.CreditCardRange[] creditCardValidator_CreditCardRangeArray0 = new CreditCardValidator.CreditCardRange[0];
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(codeValidatorArray0, creditCardValidator_CreditCardRangeArray0);
      Object object0 = creditCardValidator0.validate("00");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CreditCardValidator.CreditCardRange[] creditCardValidator_CreditCardRangeArray0 = new CreditCardValidator.CreditCardRange[6];
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(creditCardValidator_CreditCardRangeArray0);
      Object object0 = creditCardValidator0.validate("_Qv9");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CreditCardValidator creditCardValidator0 = new CreditCardValidator();
      Object object0 = creditCardValidator0.validate((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CreditCardValidator creditCardValidator0 = CreditCardValidator.genericCreditCardValidator((-773));
      assertEquals(64L, CreditCardValidator.MASTERCARD_PRE_OCT2016);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CreditCardValidator creditCardValidator0 = CreditCardValidator.genericCreditCardValidator();
      assertEquals(2L, CreditCardValidator.VISA);
  }
}
