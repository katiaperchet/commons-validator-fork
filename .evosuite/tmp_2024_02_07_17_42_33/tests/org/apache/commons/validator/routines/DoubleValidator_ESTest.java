/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 07 17:58:56 GMT 2024
 */

package org.apache.commons.validator.routines;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DateFormat;
import java.text.Format;
import java.util.Locale;
import org.apache.commons.validator.routines.DoubleValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleValidator_ESTest extends DoubleValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      Double double0 = new Double(1);
      boolean boolean0 = doubleValidator0.minValue(double0, 0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      Double double0 = new Double(1);
      boolean boolean0 = doubleValidator0.isInRange(double0, (-1.0), 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      Double double0 = doubleValidator0.validate("0", (Locale) null);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      Double double0 = doubleValidator0.validate("1", (Locale) null);
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      Double double0 = doubleValidator0.validate("-1", (Locale) null);
      assertEquals((-1.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      Locale locale0 = Locale.CANADA;
      Double double0 = doubleValidator0.validate("0", "0", locale0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      Locale locale0 = Locale.UK;
      Double double0 = doubleValidator0.validate("1", (String) null, locale0);
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      Locale locale0 = Locale.UK;
      Double double0 = doubleValidator0.validate("-1", "", locale0);
      assertEquals((-1.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      Double double0 = doubleValidator0.validate("t+i]D3F]+3W6Y}&F0QL", "t+i]D3F]+3W6Y}&F0QL");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      Double double0 = doubleValidator0.validate("1", "");
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      Double double0 = doubleValidator0.validate("0");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      Double double0 = doubleValidator0.validate("1");
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      Double double0 = doubleValidator0.validate("1,469");
      assertEquals(1469.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      Double double0 = new Double((-1.0));
      boolean boolean0 = doubleValidator0.isInRange(double0, (-1.0), 1.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
      try { 
        doubleValidator0.validate("CtJjSP{Mi", "org.apache.commons.validator.routines.DoubleValidator", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \"org.apache.commons.validator.routines.DoubleValidator\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator(true, 2049);
      // Undeclared exception!
      try { 
        doubleValidator0.validate("org.apache.commons.validator.routines.DoubleValidator", "org.apache.commons.validator.routines.DoubleValidator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \"org.apache.commons.validator.routines.DoubleValidator\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      DateFormat dateFormat0 = DateFormat.getDateInstance(0);
      // Undeclared exception!
      try { 
        doubleValidator0.processParsedValue((Object) null, dateFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.DoubleValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      Locale locale0 = Locale.ROOT;
      Format format0 = doubleValidator0.getFormat(locale0);
      // Undeclared exception!
      try { 
        doubleValidator0.processParsedValue("1", format0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.validator.routines.DoubleValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      // Undeclared exception!
      try { 
        doubleValidator0.minValue((Double) null, 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.DoubleValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      // Undeclared exception!
      try { 
        doubleValidator0.maxValue((Double) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.DoubleValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      boolean boolean0 = doubleValidator0.minValue(0.0, 0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      boolean boolean0 = doubleValidator0.minValue((-1.0), 1149.4606851470473);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      boolean boolean0 = doubleValidator0.maxValue((-543.202229), (-543.202229));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      boolean boolean0 = doubleValidator0.isInRange((-1.0), 0.0, 1353.54025009);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator(true, 2049);
      boolean boolean0 = doubleValidator0.maxValue((-1.0), (-4095.9));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      Long long0 = new Long(1);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Object object0 = doubleValidator0.processParsedValue(long0, mockSimpleDateFormat0);
      Object object1 = doubleValidator0.processParsedValue(object0, mockSimpleDateFormat0);
      assertEquals(1.0, object1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      Double double0 = new Double(0);
      boolean boolean0 = doubleValidator0.minValue(double0, (double) 2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      Double double0 = new Double(0);
      boolean boolean0 = doubleValidator0.maxValue(double0, (double) 2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      boolean boolean0 = doubleValidator0.isInRange((double) 0, (double) 0, (-1.0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      boolean boolean0 = doubleValidator0.isInRange((double) 0, (double) 0, (double) 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      Double double0 = doubleValidator0.validate("9:#$/&x9]>s");
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      Locale locale0 = Locale.ENGLISH;
      Double double0 = doubleValidator0.validate("9:#$/&x9]>s", "9:#$/&x9]>s", locale0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      Locale locale0 = Locale.CHINA;
      Double double0 = doubleValidator0.validate((String) null, locale0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      // Undeclared exception!
      try { 
        doubleValidator0.isInRange((Double) null, (-120.0), 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.DoubleValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      Long long0 = new Long(1);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Double double0 = (Double)doubleValidator0.processParsedValue(long0, mockSimpleDateFormat0);
      assertEquals(1.0, (double)double0, 0.01);
      
      boolean boolean0 = doubleValidator0.maxValue(double0, (double) 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      Double double0 = doubleValidator0.validate((String) null, (String) null);
      assertNull(double0);
  }
}
