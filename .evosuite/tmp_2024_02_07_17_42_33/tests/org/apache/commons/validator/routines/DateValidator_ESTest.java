/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 07 18:10:12 GMT 2024
 */

package org.apache.commons.validator.routines;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.MessageFormat;
import java.time.ZoneId;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.validator.routines.DateValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateValidator_ESTest extends DateValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      dateValidator0.validate("Sc'B", "");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      dateValidator0.validate("", " U8_IU#D<PL=lo", timeZone0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      dateValidator0.validate("9", "9", locale0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      Locale locale0 = Locale.CANADA_FRENCH;
      dateValidator0.validate("", "{k6", locale0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 1823);
      Locale locale0 = Locale.ITALY;
      dateValidator0.validate(",", ",", locale0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance();
      dateValidator0.processParsedValue((Object) null, dateFormat0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
      Locale locale0 = Locale.PRC;
      MessageFormat messageFormat0 = new MessageFormat("VT40z", locale0);
      dateValidator0.processParsedValue(simpleTimeZone0, messageFormat0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, (-2867));
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2867), "i");
      MockDate mockDate1 = new MockDate((-2867), (-2867), (-2867), (-2867), (-2867));
      dateValidator0.compareYears(mockDate0, mockDate1, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 0);
      MockDate mockDate0 = new MockDate(0, 0, 5, 0, 5, 0);
      MockDate mockDate1 = new MockDate((-2500), 0, 0, 5, (-2500));
      dateValidator0.compareYears(mockDate1, mockDate0, (TimeZone) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      MockDate mockDate0 = new MockDate(0L);
      MockDate mockDate1 = new MockDate((-1), (-1730), 0, 5, 0, (-1));
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      dateValidator0.compareWeeks(mockDate0, mockDate1, timeZone0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate0 = new MockDate(0L);
      MockDate mockDate1 = new MockDate((-7L));
      dateValidator0.compareWeeks(mockDate1, mockDate0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(true, 0);
      MockDate mockDate0 = new MockDate(0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      dateValidator0.compareQuarters((Date) mockDate0, date0, timeZone0, 1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(true, 0);
      MockDate mockDate0 = new MockDate(0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      int int0 = dateValidator0.compareQuarters(date0, (Date) mockDate0, timeZone0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 10);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 433, 433);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      TimeZone timeZone0 = TimeZone.getDefault();
      int int0 = dateValidator0.compareQuarters(date0, date0, timeZone0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(true, 0);
      MockDate mockDate0 = new MockDate(0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      int int0 = dateValidator0.compareQuarters((Date) mockDate0, date0, timeZone0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("K]wD|ow3nI]/B");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2156, (-1), 1454, 1454, (-158), (-1));
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      int int0 = dateValidator0.compareQuarters(date0, (Date) mockDate0, timeZone0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-675), (-675), 1, (-675), (-426), (-675));
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate1 = new MockDate((-426), (-426), (-426));
      DateValidator dateValidator0 = new DateValidator();
      int int0 = dateValidator0.compareMonths(mockDate1, mockDate0, timeZone0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(true, 0);
      MockDate mockDate0 = new MockDate(0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      int int0 = dateValidator0.compareMonths(date0, mockDate0, timeZone0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate0 = new MockDate((-8L));
      MockDate mockDate1 = new MockDate(0, 0, 0);
      int int0 = dateValidator0.compareDates(mockDate0, mockDate1, timeZone0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate0 = new MockDate(0L);
      MockDate mockDate1 = new MockDate((-7L));
      int int0 = dateValidator0.compareDates(mockDate1, mockDate0, timeZone0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(true, 4370);
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        dateValidator0.validate("J:L", timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 4370
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 1052);
      Locale locale0 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        dateValidator0.validate("b<{glX", locale0, (TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1052
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 10);
      Locale locale0 = Locale.US;
      // Undeclared exception!
      try { 
        dateValidator0.validate("qcD}Lh0pHhi%%J", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 10
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 2);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "X)DKul}/.;Z@4,{", 0, 0, 0, 0, 0, 0, 0, 1);
      // Undeclared exception!
      try { 
        dateValidator0.validate("X)DKul}/.;Z@4,{", "X)DKul}/.;Z@4,{", (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'l'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 10);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      // Undeclared exception!
      try { 
        dateValidator0.validate("c", "", locale0, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 10
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      // Undeclared exception!
      try { 
        dateValidator0.validate("nt007)IItHQ(", "nt007)IItHQ(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'n'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 10);
      // Undeclared exception!
      try { 
        dateValidator0.validate(")mOvMpxk~S-:,i]3KeV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 10
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      // Undeclared exception!
      try { 
        dateValidator0.compareYears((Date) null, (Date) null, timeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        dateValidator0.compareWeeks((Date) null, (Date) null, timeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        dateValidator0.compareQuarters((Date) null, (Date) null, timeZone0, (-1479));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 3);
      MockDate mockDate0 = new MockDate(3, 3, 3);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "fcy_pMCB~e3{)", 3, 3, 3, 3, 3, 0, (-305), 3268);
      // Undeclared exception!
      try { 
        dateValidator0.compareMonths(mockDate0, (Date) null, simpleTimeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        dateValidator0.compareDates((Date) null, (Date) null, timeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 10);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 433, 433);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      int int0 = dateValidator0.compareQuarters(date0, date0, (TimeZone) null, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate0 = new MockDate();
      int int0 = dateValidator0.compareWeeks(mockDate0, mockDate0, timeZone0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Date date0 = dateValidator0.validate("}", locale0, timeZone0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      Date date0 = dateValidator0.validate("S");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Date date0 = dateValidator0.validate("S", "S", (Locale) null, timeZone0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 0);
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0, 0);
      int int0 = dateValidator0.compareMonths(mockDate0, mockDate0, (TimeZone) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate0 = new MockDate();
      int int0 = dateValidator0.compareDates(mockDate0, mockDate0, timeZone0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1892), "Invalid field: ");
      Date date0 = dateValidator0.validate("Invalid field: ", (TimeZone) simpleTimeZone0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        dateValidator0.validate(")5uH>I_|", ")5uH>I_|", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'I'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      MockDate mockDate0 = new MockDate((-675), (-675), (-675));
      TimeZone timeZone0 = TimeZone.getDefault();
      int int0 = dateValidator0.compareYears(mockDate0, mockDate0, timeZone0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Date date0 = dateValidator0.validate("}", "}", timeZone0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 0);
      Locale locale0 = Locale.KOREAN;
      Date date0 = dateValidator0.validate("><y'?0K~Dssdm-A`T", locale0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(7, "-`w0");
      // Undeclared exception!
      try { 
        dateValidator0.compareQuarters((Date) null, (Date) null, (TimeZone) simpleTimeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }
}
