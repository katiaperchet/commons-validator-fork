/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 07 17:56:49 GMT 2024
 */

package org.apache.commons.validator.routines;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;
import org.apache.commons.validator.routines.BigDecimalValidator;
import org.apache.commons.validator.routines.CurrencyValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CurrencyValidator_ESTest extends CurrencyValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CurrencyValidator currencyValidator0 = (CurrencyValidator)CurrencyValidator.getInstance();
      Locale locale0 = Locale.FRENCH;
      DecimalFormat decimalFormat0 = (DecimalFormat)currencyValidator0.getFormat("", locale0);
      currencyValidator0.parse("", decimalFormat0);
      assertEquals("#,##0.00 ", decimalFormat0.toPattern());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator(false, false);
      Locale locale0 = Locale.KOREAN;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      BigDecimal bigDecimal0 = (BigDecimal)currencyValidator0.parse("3M@ZK", numberFormat0);
      assertEquals((short)3, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      // Undeclared exception!
      currencyValidator0.parse("", decimalFormat0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator(false, false);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      // Undeclared exception!
      try { 
        currencyValidator0.parse("", mockSimpleDateFormat0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator(false, false);
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      // Undeclared exception!
      try { 
        currencyValidator0.parse((String) null, dateFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      DateFormat dateFormat0 = DateFormat.getDateInstance(1);
      Object object0 = currencyValidator0.parse("O0OYT]C@FH5[[9SV", dateFormat0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      Locale locale0 = Locale.CANADA;
      boolean boolean0 = currencyValidator0.isValid("O0OYT]C@FH5[[9SV", locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = CurrencyValidator.getInstance();
      boolean boolean0 = bigDecimalValidator0.isValid(" Gj", " Gj");
      assertFalse(boolean0);
  }
}
