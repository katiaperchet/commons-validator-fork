/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 07 17:22:54 GMT 2024
 */

package org.apache.commons.validator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.collections.FastHashMap;
import org.apache.commons.validator.Field;
import org.apache.commons.validator.Form;
import org.apache.commons.validator.ValidatorResults;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Form_ESTest extends Form_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Form form0 = new Form();
      Field field0 = new Field();
      form0.addField(field0);
      FastHashMap fastHashMap0 = new FastHashMap(0);
      FastHashMap fastHashMap1 = field0.hVars;
      form0.validate(fastHashMap0, fastHashMap1, 0);
      assertEquals(2, fastHashMap0.size());
      assertFalse(fastHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Form form0 = new Form();
      form0.inherit = "oE>%9.:i5q$cs[";
      String string0 = form0.toString();
      assertEquals("Form: null\n", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Form form0 = new Form();
      Field field0 = new Field();
      form0.addField(field0);
      FastHashMap fastHashMap0 = field0.hMsgs;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      form0.process(fastHashMap0, hashMap0, fastHashMap0);
      assertTrue(fastHashMap0.getFast());
      assertFalse(form0.isExtending());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Form form0 = new Form();
      FastHashMap fastHashMap0 = form0.hFields;
      Field field0 = new Field();
      form0.addField(field0);
      FastHashMap fastHashMap1 = field0.hVars;
      // Undeclared exception!
      try { 
        form0.process(form0.hFields, fastHashMap0, fastHashMap1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.validator.Field cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.validator.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Form form0 = new Form();
      Form form1 = new Form();
      form0.setExtends(" in form ");
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hMsgs;
      fastHashMap0.put(" in form ", form1);
      form0.process(fastHashMap0, fastHashMap0, fastHashMap0);
      assertTrue(form0.isProcessed());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Form form0 = new Form();
      Field field0 = new Field();
      form0.setExtends("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      FastHashMap fastHashMap0 = field0.hMsgs;
      form0.process(hashMap0, hashMap0, fastHashMap0);
      assertTrue(form0.isProcessed());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Form form0 = new Form();
      Field field0 = new Field();
      form0.addField(field0);
      Field field1 = new Field();
      form0.addField(field1);
      form0.merge(form0);
      assertFalse(form0.isProcessed());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Form form0 = new Form();
      Form form1 = new Form();
      form0.setExtends("HbS,ka");
      Field field0 = new Field();
      form1.addField(field0);
      form0.merge(form1);
      assertTrue(form0.isExtending());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Form form0 = new Form();
      form0.setName("HbS,ka");
      Form form1 = new Form();
      Field field0 = new Field();
      form1.addField(field0);
      form0.merge(form1);
      assertFalse(form1.isProcessed());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Form form0 = new Form();
      form0.name = "S@9Ff&8WxY0|E55>g";
      Field field0 = new Field();
      form0.addField(field0);
      // Undeclared exception!
      try { 
        form0.merge(form0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Form form0 = new Form();
      FastHashMap fastHashMap0 = form0.hFields;
      ValidatorResults validatorResults0 = form0.validate(fastHashMap0, fastHashMap0, (-1190), (String) null);
      assertTrue(validatorResults0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Form form0 = new Form();
      FastHashMap fastHashMap0 = form0.hFields;
      form0.process(fastHashMap0, fastHashMap0, fastHashMap0);
      boolean boolean0 = form0.isProcessed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Form form0 = new Form();
      form0.name = "  position=";
      String string0 = form0.getName();
      assertEquals("  position=", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Form form0 = new Form();
      form0.name = "[";
      form0.name = "";
      String string0 = form0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Form form0 = new Form();
      form0.hFields = null;
      Map<String, Field> map0 = form0.getFieldMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Form form0 = new Form();
      Map<String, Field> map0 = form0.getFieldMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Form form0 = new Form();
      Field field0 = new Field();
      FastHashMap fastHashMap0 = form0.hFields;
      fastHashMap0.put(field0, field0);
      Map<String, Field> map0 = form0.getFieldMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Form form0 = new Form();
      Field field0 = new Field();
      form0.addField(field0);
      Field field1 = form0.getField((String) null);
      assertTrue(field1.isClientValidation());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Form form0 = new Form();
      form0.setExtends("O/)7>%e'");
      form0.getExtends();
      assertTrue(form0.isExtending());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Form form0 = new Form();
      form0.setExtends("");
      String string0 = form0.getExtends();
      assertNotNull(string0);
      assertTrue(form0.isExtending());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Form form0 = new Form();
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hMsgs;
      // Undeclared exception!
      try { 
        form0.validate((Map<String, Object>) null, fastHashMap0, (-1), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.Form", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Form form0 = new Form();
      FastHashMap fastHashMap0 = form0.hFields;
      fastHashMap0.put("", fastHashMap0);
      // Undeclared exception!
      try { 
        form0.validate(fastHashMap0, fastHashMap0, 0, "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections.FastHashMap cannot be cast to org.apache.commons.validator.Field
         //
         verifyException("org.apache.commons.validator.Form", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Form form0 = new Form();
      Field field0 = new Field();
      form0.addField(field0);
      FastHashMap fastHashMap0 = new FastHashMap(0);
      field0.setDepends("[]");
      try { 
        form0.validate(fastHashMap0, fastHashMap0, 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No ValidatorAction named [] found for field null
         //
         verifyException("org.apache.commons.validator.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Form form0 = new Form();
      FastHashMap fastHashMap0 = new FastHashMap(0);
      // Undeclared exception!
      try { 
        form0.validate((Map<String, Object>) null, fastHashMap0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.Form", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Form form0 = new Form();
      Field field0 = new Field();
      FastHashMap fastHashMap0 = form0.hFields;
      field0.hVars = fastHashMap0;
      form0.addField(field0);
      // Undeclared exception!
      try { 
        form0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Form form0 = new Form();
      form0.setExtends("O/)7>%e'");
      // Undeclared exception!
      try { 
        form0.process((Map<String, String>) null, (Map<String, String>) null, (Map<String, Form>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.Form", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Form form0 = new Form();
      List<Field> list0 = form0.getFields();
      form0.lFields = list0;
      // Undeclared exception!
      try { 
        form0.merge(form0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Form form0 = new Form();
      form0.lFields = null;
      // Undeclared exception!
      try { 
        form0.merge(form0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Form form0 = new Form();
      Form form1 = new Form();
      FastHashMap fastHashMap0 = form0.hFields;
      fastHashMap0.put((Object) null, "HbS,ka");
      Field field0 = new Field();
      form1.addField(field0);
      // Undeclared exception!
      try { 
        form0.merge(form1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.apache.commons.validator.Field
         //
         verifyException("org.apache.commons.validator.Form", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Form form0 = new Form();
      form0.lFields = null;
      // Undeclared exception!
      try { 
        form0.getFields();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Form form0 = new Form();
      form0.hFields = null;
      // Undeclared exception!
      try { 
        form0.getField("\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.Form", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Form form0 = new Form();
      FastHashMap fastHashMap0 = form0.hFields;
      fastHashMap0.put("Form: null\n", "ZD");
      // Undeclared exception!
      try { 
        form0.getField("Form: null\n");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.apache.commons.validator.Field
         //
         verifyException("org.apache.commons.validator.Form", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Form form0 = new Form();
      // Undeclared exception!
      try { 
        form0.addField((Field) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.Form", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Form form0 = new Form();
      form0.setExtends("O/)7>%e'");
      boolean boolean0 = form0.isExtending();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Form form0 = new Form();
      boolean boolean0 = form0.isExtending();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Form form0 = new Form();
      FastHashMap fastHashMap0 = form0.hFields;
      fastHashMap0.put("Form: null\n", "ZD");
      boolean boolean0 = form0.containsField("Form: null\n");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Form form0 = new Form();
      String string0 = form0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Form form0 = new Form();
      boolean boolean0 = form0.isProcessed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Form form0 = new Form();
      List<Field> list0 = form0.getFields();
      form0.lFields = list0;
      Field field0 = new Field();
      // Undeclared exception!
      try { 
        form0.addField(field0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Form form0 = new Form();
      FastHashMap fastHashMap0 = form0.hFields;
      Field field0 = new Field();
      form0.addField(field0);
      form0.validate(fastHashMap0, fastHashMap0, (-1062));
      assertEquals(3, fastHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Form form0 = new Form();
      Field field0 = new Field();
      form0.addField(field0);
      String string0 = form0.toString();
      assertEquals("Form: null\n\tField: \n\t\tkey = null\n\t\tproperty = null\n\t\tindexedProperty = null\n\t\tindexedListProperty = null\n\t\tdepends = null\n\t\tpage = 0\n\t\tfieldOrder = 0\n\t\tVars:\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Form form0 = new Form();
      Form form1 = new Form();
      FastHashMap fastHashMap0 = form0.hFields;
      form1.process((Map<String, String>) null, (Map<String, String>) null, fastHashMap0);
      form0.setExtends("HbS,ka");
      Field field0 = new Field();
      form1.addField(field0);
      form1.addField(field0);
      fastHashMap0.put("HbS,ka", form1);
      form0.process(fastHashMap0, fastHashMap0, fastHashMap0);
      assertTrue(fastHashMap0.getFast());
      assertEquals(2, fastHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Form form0 = new Form();
      Form form1 = new Form();
      Field field0 = new Field();
      form1.addField(field0);
      form0.merge(form1);
      FastHashMap fastHashMap0 = new FastHashMap();
      form0.validate(fastHashMap0, fastHashMap0, 76);
      assertEquals(2, fastHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Form form0 = new Form();
      boolean boolean0 = form0.containsField("HbS,ka");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Form form0 = new Form();
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hMsgs;
      form0.process(fastHashMap0, fastHashMap0, fastHashMap0);
      form0.process(fastHashMap0, fastHashMap0, fastHashMap0);
      assertTrue(form0.isProcessed());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Form form0 = new Form();
      FastHashMap fastHashMap0 = new FastHashMap(0);
      try { 
        form0.validate(fastHashMap0, fastHashMap0, 0, "[");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown field [ in form null
         //
         verifyException("org.apache.commons.validator.Form", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Form form0 = new Form();
      Field field0 = form0.getField("org.apache.commons.validator.Form");
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Form form0 = new Form();
      form0.setExtends("HbS,ka");
      Field field0 = new Field();
      form0.addField(field0);
      // Undeclared exception!
      try { 
        form0.merge(form0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Form form0 = new Form();
      String string0 = form0.getExtends();
      assertNull(string0);
  }
}
