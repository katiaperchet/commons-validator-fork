/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 07 17:53:23 GMT 2024
 */

package org.apache.commons.validator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.apache.commons.collections.FastHashMap;
import org.apache.commons.validator.Field;
import org.apache.commons.validator.ValidatorResult;
import org.apache.commons.validator.ValidatorResults;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ValidatorResults_ESTest extends ValidatorResults_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      Field field0 = new Field();
      validatorResults0.add(field0, "[]", false, (Object) null);
      ValidatorResult validatorResult0 = validatorResults0.getValidatorResult((String) null);
      assertNotNull(validatorResult0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      // Undeclared exception!
      try { 
        validatorResults0.merge((ValidatorResults) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.ValidatorResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      validatorResults0.hResults = null;
      // Undeclared exception!
      try { 
        validatorResults0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      HashMap<String, ValidatorResult> hashMap0 = new HashMap<String, ValidatorResult>();
      validatorResults0.hResults = (Map<String, ValidatorResult>) hashMap0;
      hashMap0.put("\t\tkey = null\n\t\tproperty = null\n\t\tindexedProperty = null\n\t\tindexedListProperty = null\n\t\tdepends = null\n\t\tpage = 0\n\t\tfieldOrder = 0\n\t\tVars:\n", (ValidatorResult) null);
      // Undeclared exception!
      try { 
        validatorResults0.getResultValueMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.ValidatorResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hMsgs;
      ValidatorResults validatorResults0 = field0.validate(fastHashMap0, fastHashMap0);
      validatorResults0.hResults = (Map<String, ValidatorResult>) fastHashMap0;
      fastHashMap0.put(validatorResults0, field0);
      // Undeclared exception!
      try { 
        validatorResults0.getResultValueMap();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.validator.ValidatorResults cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.validator.ValidatorResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      validatorResults0.hResults = null;
      // Undeclared exception!
      try { 
        validatorResults0.getPropertyNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.ValidatorResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      validatorResults0.hResults = null;
      // Undeclared exception!
      try { 
        validatorResults0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.ValidatorResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      FastHashMap fastHashMap0 = new FastHashMap(2147483645, 2147483645);
      validatorResults0.hResults = (Map<String, ValidatorResult>) fastHashMap0;
      Field field0 = new Field();
      Boolean boolean0 = Boolean.FALSE;
      // Undeclared exception!
      validatorResults0.add(field0, "$':zT.?N+>oP4|8cwuJ3", true, (Object) boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      // Undeclared exception!
      try { 
        validatorResults0.add((Field) null, "", true, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.ValidatorResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      // Undeclared exception!
      try { 
        validatorResults0.add((Field) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.ValidatorResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      Field field0 = new Field();
      FastHashMap fastHashMap0 = new FastHashMap();
      field0.key = "";
      validatorResults0.hResults = (Map<String, ValidatorResult>) fastHashMap0;
      fastHashMap0.put("", "");
      // Undeclared exception!
      try { 
        validatorResults0.add(field0, "pwmE&Ylpwt]Rq2*3$@", true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.apache.commons.validator.ValidatorResult
         //
         verifyException("org.apache.commons.validator.ValidatorResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      Field field0 = new Field();
      ValidatorResult validatorResult0 = validatorResults0.getValidatorResult("[]");
      validatorResults0.add(field0, "[]", false, (Object) null);
      validatorResults0.add(field0, "org.apache.commons.validator.Field", false, (Object) validatorResult0);
      assertTrue(field0.isClientValidation());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      boolean boolean0 = validatorResults0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Field field0 = new Field();
      ValidatorResults validatorResults0 = new ValidatorResults();
      assertTrue(validatorResults0.isEmpty());
      
      Integer integer0 = new Integer(728);
      validatorResults0.add(field0, "[]", true, (Object) integer0);
      boolean boolean0 = validatorResults0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      Field field0 = new Field();
      Boolean boolean0 = Boolean.TRUE;
      validatorResults0.add(field0, "", false, (Object) boolean0);
      Map<String, Object> map0 = validatorResults0.getResultValueMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Field field0 = new Field();
      ValidatorResults validatorResults0 = new ValidatorResults();
      Integer integer0 = new Integer(728);
      validatorResults0.add(field0, "[]", true, (Object) integer0);
      Map<String, Object> map0 = validatorResults0.getResultValueMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Field field0 = new Field();
      ValidatorResults validatorResults0 = new ValidatorResults();
      Integer integer0 = new Integer(728);
      validatorResults0.add(field0, "[]", true, (Object) integer0);
      validatorResults0.add(field0, "i9>X]2? |h", true);
      assertEquals(0, field0.getFieldOrder());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      validatorResults0.clear();
      assertTrue(validatorResults0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Field field0 = new Field();
      ValidatorResults validatorResults0 = new ValidatorResults();
      validatorResults0.add(field0, "i9>X]2? |h", true);
      Map<String, Object> map0 = validatorResults0.getResultValueMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      validatorResults0.merge(validatorResults0);
      assertTrue(validatorResults0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      Set<String> set0 = validatorResults0.getPropertyNames();
      assertTrue(set0.isEmpty());
  }
}
