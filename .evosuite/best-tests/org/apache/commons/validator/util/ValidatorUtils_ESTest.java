/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 07 17:36:26 GMT 2024
 */

package org.apache.commons.validator.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.collections.FastHashMap;
import org.apache.commons.validator.util.ValidatorUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ValidatorUtils_ESTest extends ValidatorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Map<String, Object> map0 = ValidatorUtils.copyMap(hashMap0);
      hashMap0.put("", map0);
      String string0 = ValidatorUtils.getValueAsString(hashMap0, "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = ValidatorUtils.replace("Jj-&W%Sn(DVg '+t+zJ", "Jj-&W%Sn(DVg '+t+zJ", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", "");
      Map<String, Object> map0 = ValidatorUtils.copyMap(hashMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FastHashMap fastHashMap0 = new FastHashMap(1955, 1955);
      fastHashMap0.putIfAbsent((Object) null, ".g$`6KSjde2");
      FastHashMap fastHashMap1 = ValidatorUtils.copyFastHashMap(fastHashMap0);
      assertTrue(fastHashMap1.getFast());
      assertEquals(1, fastHashMap1.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FastHashMap fastHashMap0 = new FastHashMap(2288);
      // Undeclared exception!
      try { 
        ValidatorUtils.getValueAsString(fastHashMap0, "org.apache.commons.validator.util.ValidatorUtils");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null property value for 'org.apache.commons.validator.util.ValidatorUtils' on bean class 'class org.apache.commons.collections.FastHashMap'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        ValidatorUtils.getValueAsString((Object) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        ValidatorUtils.copyMap((Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.util.ValidatorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FastHashMap fastHashMap0 = new FastHashMap(326);
      Object object0 = new Object();
      fastHashMap0.putIfAbsent(fastHashMap0, object0);
      // Undeclared exception!
      try { 
        ValidatorUtils.copyMap(fastHashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections.FastHashMap cannot be cast to java.lang.String
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        ValidatorUtils.copyFastHashMap((FastHashMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.util.ValidatorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FastHashMap fastHashMap0 = new FastHashMap();
      Integer integer0 = new Integer(350);
      fastHashMap0.putIfAbsent(integer0, "");
      // Undeclared exception!
      try { 
        ValidatorUtils.copyFastHashMap(fastHashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = ValidatorUtils.replace("3}EUX&5Eg]VkV+)W", "lqh*h>[Qv", "rd}y1V`0x-kY6+");
      assertEquals("3}EUX&5Eg]VkV+)W", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = ValidatorUtils.replace("2[C?uffu)`cvv", (String) null, "");
      assertNotNull(string0);
      assertEquals("2[C?uffu)`cvv", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = ValidatorUtils.replace("#$,`fB", "&S", (String) null);
      assertNotNull(string0);
      assertEquals("#$,`fB", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = ValidatorUtils.replace((String) null, "#$,`fB", "#$,`fB");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      String string0 = ValidatorUtils.getValueAsString(object0, "rd}y1V`0x-kY6+");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FastHashMap fastHashMap0 = new FastHashMap();
      FastHashMap fastHashMap1 = ValidatorUtils.copyFastHashMap(fastHashMap0);
      assertTrue(fastHashMap1.getFast());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ValidatorUtils validatorUtils0 = new ValidatorUtils();
  }
}
