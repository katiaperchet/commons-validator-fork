/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 07 17:34:05 GMT 2024
 */

package org.apache.commons.validator.routines;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.validator.routines.ISBNValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ISBNValidator_ESTest extends ISBNValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ISBNValidator iSBNValidator0 = ISBNValidator.getInstance(false);
      // Undeclared exception!
      try { 
        iSBNValidator0.convertToISBN13("V[En<_5Rg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid length 9 for 'V[En<_5Rg'
         //
         verifyException("org.apache.commons.validator.routines.ISBNValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ISBNValidator iSBNValidator0 = ISBNValidator.getInstance();
      // Undeclared exception!
      try { 
        iSBNValidator0.convertToISBN13("\"JM76:%Zal?IJ~R ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid length 16 for '\"JM76:%Zal?IJ~R'
         //
         verifyException("org.apache.commons.validator.routines.ISBNValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ISBNValidator iSBNValidator0 = ISBNValidator.getInstance();
      String string0 = iSBNValidator0.validateISBN13("\"JM76:%Zal?IJ~R ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ISBNValidator iSBNValidator0 = ISBNValidator.getInstance();
      String string0 = iSBNValidator0.validateISBN10("MGKV}|AI|");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ISBNValidator iSBNValidator0 = new ISBNValidator(true);
      boolean boolean0 = iSBNValidator0.isValidISBN13("\"eYleSCpt4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ISBNValidator iSBNValidator0 = new ISBNValidator(true);
      boolean boolean0 = iSBNValidator0.isValidISBN10("%K}]wk#.leZM7qg>s");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ISBNValidator iSBNValidator0 = ISBNValidator.getInstance();
      String string0 = iSBNValidator0.validate("ej");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ISBNValidator iSBNValidator0 = ISBNValidator.getInstance();
      // Undeclared exception!
      try { 
        iSBNValidator0.convertToISBN13("\"eYleSCpt4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check digit error for '\"eYleSCpt4' - Invalid Character[4] = '\"'
         //
         verifyException("org.apache.commons.validator.routines.ISBNValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ISBNValidator iSBNValidator0 = ISBNValidator.getInstance(false);
      String string0 = iSBNValidator0.convertToISBN13((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ISBNValidator iSBNValidator0 = ISBNValidator.getInstance(true);
      assertNotNull(iSBNValidator0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ISBNValidator iSBNValidator0 = new ISBNValidator();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ISBNValidator iSBNValidator0 = ISBNValidator.getInstance();
      boolean boolean0 = iSBNValidator0.isValid("ej");
      assertFalse(boolean0);
  }
}
