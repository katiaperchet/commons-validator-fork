/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 07 17:30:15 GMT 2024
 */

package org.apache.commons.validator.routines;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.regex.PatternSyntaxException;
import org.apache.commons.validator.routines.CodeValidator;
import org.apache.commons.validator.routines.RegexValidator;
import org.apache.commons.validator.routines.checkdigit.CheckDigit;
import org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit;
import org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit;
import org.apache.commons.validator.routines.checkdigit.ISBNCheckDigit;
import org.apache.commons.validator.routines.checkdigit.ISINCheckDigit;
import org.apache.commons.validator.routines.checkdigit.LuhnCheckDigit;
import org.apache.commons.validator.routines.checkdigit.ModulusTenCheckDigit;
import org.apache.commons.validator.routines.checkdigit.SedolCheckDigit;
import org.apache.commons.validator.routines.checkdigit.VerhoeffCheckDigit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CodeValidator_ESTest extends CodeValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ISBN10CheckDigit iSBN10CheckDigit0 = (ISBN10CheckDigit)ISBNCheckDigit.ISBN10_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator("&/", iSBN10CheckDigit0);
      boolean boolean0 = codeValidator0.isValid("&/");
      assertEquals((-1), codeValidator0.getMinLength());
      assertFalse(boolean0);
      assertEquals((-1), codeValidator0.getMaxLength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VerhoeffCheckDigit verhoeffCheckDigit0 = (VerhoeffCheckDigit)VerhoeffCheckDigit.VERHOEFF_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator((String) null, (-2146), 1350, verhoeffCheckDigit0);
      Object object0 = codeValidator0.validate("v.tQUo3");
      assertNull(object0);
      assertEquals((-2146), codeValidator0.getMinLength());
      assertEquals(1350, codeValidator0.getMaxLength());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SedolCheckDigit sedolCheckDigit0 = (SedolCheckDigit)SedolCheckDigit.SEDOL_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator("", 1, sedolCheckDigit0);
      boolean boolean0 = codeValidator0.isValid("org.apache.commons.validator.routines.CodeValidator");
      assertEquals(1, codeValidator0.getMinLength());
      assertEquals(1, codeValidator0.getMaxLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EAN13CheckDigit eAN13CheckDigit0 = (EAN13CheckDigit)EAN13CheckDigit.EAN13_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator("M'5\tSL", 0, 0, eAN13CheckDigit0);
      RegexValidator regexValidator0 = codeValidator0.getRegexValidator();
      assertEquals(0, codeValidator0.getMinLength());
      assertEquals(0, codeValidator0.getMaxLength());
      assertNotNull(regexValidator0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SedolCheckDigit sedolCheckDigit0 = (SedolCheckDigit)SedolCheckDigit.SEDOL_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator((String) null, 0, 0, sedolCheckDigit0);
      int int0 = codeValidator0.getMinLength();
      assertEquals(0, codeValidator0.getMaxLength());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VerhoeffCheckDigit verhoeffCheckDigit0 = (VerhoeffCheckDigit)VerhoeffCheckDigit.VERHOEFF_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator("dQ,D/xH4,.ygk-\"__", 60, 60, verhoeffCheckDigit0);
      int int0 = codeValidator0.getMinLength();
      assertEquals(60, int0);
      assertEquals(60, codeValidator0.getMaxLength());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CodeValidator codeValidator0 = new CodeValidator((RegexValidator) null, 0, (CheckDigit) null);
      int int0 = codeValidator0.getMaxLength();
      assertEquals(0, int0);
      assertEquals(0, codeValidator0.getMinLength());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CodeValidator codeValidator0 = new CodeValidator("", 1627, (CheckDigit) null);
      int int0 = codeValidator0.getMaxLength();
      assertEquals(1627, codeValidator0.getMinLength());
      assertEquals(1627, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CodeValidator codeValidator0 = new CodeValidator("org.apache.commons.validator.routines.RegexValidator", (CheckDigit) null);
      codeValidator0.getCheckDigit();
      assertEquals((-1), codeValidator0.getMinLength());
      assertEquals((-1), codeValidator0.getMaxLength());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[0];
      ModulusTenCheckDigit modulusTenCheckDigit0 = new ModulusTenCheckDigit(intArray0);
      CodeValidator codeValidator0 = new CodeValidator((String) null, modulusTenCheckDigit0);
      // Undeclared exception!
      try { 
        codeValidator0.validate("3nXs*A9nbIy:5");
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.validator.routines.checkdigit.ModulusTenCheckDigit", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ISBN10CheckDigit iSBN10CheckDigit0 = (ISBN10CheckDigit)ISBNCheckDigit.ISBN10_CHECK_DIGIT;
      CodeValidator codeValidator0 = null;
      try {
        codeValidator0 = new CodeValidator("cwK5~q[)TX,E", iSBN10CheckDigit0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 11\r
         // cwK5~q[)TX,E\r
         //            ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[4];
      ModulusTenCheckDigit modulusTenCheckDigit0 = new ModulusTenCheckDigit(intArray0, true);
      CodeValidator codeValidator0 = null;
      try {
        codeValidator0 = new CodeValidator("12y#C@g8|7})7V", (-6520), modulusTenCheckDigit0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 10\r
         // 12y#C@g8|7})7V\r
         //           ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EAN13CheckDigit eAN13CheckDigit0 = new EAN13CheckDigit();
      CodeValidator codeValidator0 = null;
      try {
        codeValidator0 = new CodeValidator("\"(so3I5@*?rbw", 0, (-3884), eAN13CheckDigit0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 13\r
         // \"(so3I5@*?rbw
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CodeValidator codeValidator0 = new CodeValidator("oH.6", 0, (CheckDigit) null);
      Object object0 = codeValidator0.validate("oH.6");
      assertEquals(0, codeValidator0.getMinLength());
      assertEquals(0, codeValidator0.getMaxLength());
      assertEquals("", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VerhoeffCheckDigit verhoeffCheckDigit0 = (VerhoeffCheckDigit)VerhoeffCheckDigit.VERHOEFF_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator("dQ,D/xH4,.ygk-\"__", 60, 60, verhoeffCheckDigit0);
      codeValidator0.validate("Invalid ISBN Length = ");
      assertEquals(60, codeValidator0.getMinLength());
      assertEquals(60, codeValidator0.getMaxLength());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ISBN10CheckDigit iSBN10CheckDigit0 = new ISBN10CheckDigit();
      CodeValidator codeValidator0 = new CodeValidator("", 0, iSBN10CheckDigit0);
      codeValidator0.validate("V");
      assertEquals(0, codeValidator0.getMaxLength());
      assertEquals(0, codeValidator0.getMinLength());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ISBNCheckDigit iSBNCheckDigit0 = (ISBNCheckDigit)ISBNCheckDigit.ISBN_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator("", 0, 0, iSBNCheckDigit0);
      assertEquals(0, codeValidator0.getMinLength());
      assertEquals(0, codeValidator0.getMaxLength());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ISINCheckDigit iSINCheckDigit0 = new ISINCheckDigit();
      CodeValidator codeValidator0 = new CodeValidator((RegexValidator) null, 1, 232, iSINCheckDigit0);
      assertEquals(232, codeValidator0.getMaxLength());
      assertEquals(1, codeValidator0.getMinLength());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ISBN10CheckDigit iSBN10CheckDigit0 = new ISBN10CheckDigit();
      CodeValidator codeValidator0 = new CodeValidator("org.apache.commons.validator.routines.CodeValidator", 8, iSBN10CheckDigit0);
      codeValidator0.validate("org.apache.commons.validator.routines.CodeValidator");
      assertEquals(8, codeValidator0.getMinLength());
      assertEquals(8, codeValidator0.getMaxLength());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SedolCheckDigit sedolCheckDigit0 = (SedolCheckDigit)SedolCheckDigit.SEDOL_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator((String) null, 0, 0, sedolCheckDigit0);
      codeValidator0.validate("");
      assertEquals(0, codeValidator0.getMaxLength());
      assertEquals(0, codeValidator0.getMinLength());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SedolCheckDigit sedolCheckDigit0 = (SedolCheckDigit)SedolCheckDigit.SEDOL_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator((String) null, 0, 0, sedolCheckDigit0);
      codeValidator0.validate((String) null);
      assertEquals(0, codeValidator0.getMaxLength());
      assertEquals(0, codeValidator0.getMinLength());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LuhnCheckDigit luhnCheckDigit0 = (LuhnCheckDigit)LuhnCheckDigit.LUHN_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator("", luhnCheckDigit0);
      int int0 = codeValidator0.getMinLength();
      assertEquals((-1), codeValidator0.getMaxLength());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LuhnCheckDigit luhnCheckDigit0 = (LuhnCheckDigit)LuhnCheckDigit.LUHN_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator("", luhnCheckDigit0);
      codeValidator0.getRegexValidator();
      assertEquals((-1), codeValidator0.getMinLength());
      assertEquals((-1), codeValidator0.getMaxLength());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator("org.apache.commons.v0lidator.routines.CodeVa1idator");
      CodeValidator codeValidator0 = new CodeValidator(regexValidator0, 0, (CheckDigit) null);
      boolean boolean0 = codeValidator0.isValid("org.apache.commons.v0lidator.routines.CodeVa1idator");
      assertEquals(0, codeValidator0.getMaxLength());
      assertEquals(0, codeValidator0.getMinLength());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LuhnCheckDigit luhnCheckDigit0 = (LuhnCheckDigit)LuhnCheckDigit.LUHN_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator("", luhnCheckDigit0);
      int int0 = codeValidator0.getMaxLength();
      assertEquals((-1), int0);
      assertEquals((-1), codeValidator0.getMinLength());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ISBN10CheckDigit iSBN10CheckDigit0 = new ISBN10CheckDigit();
      CodeValidator codeValidator0 = new CodeValidator("org.apache.commons.validator.routines.CodeValidator", 8, iSBN10CheckDigit0);
      codeValidator0.getCheckDigit();
      assertEquals(8, codeValidator0.getMinLength());
      assertEquals(8, codeValidator0.getMaxLength());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator("K@C");
      SedolCheckDigit sedolCheckDigit0 = new SedolCheckDigit();
      CodeValidator codeValidator0 = new CodeValidator(regexValidator0, sedolCheckDigit0);
      assertEquals((-1), codeValidator0.getMaxLength());
      assertEquals((-1), codeValidator0.getMinLength());
  }
}
