/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 07 16:57:15 GMT 2024
 */

package org.apache.commons.validator.routines;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.validator.routines.DomainValidator;
import org.apache.commons.validator.routines.RegexValidator;
import org.apache.commons.validator.routines.UrlValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UrlValidator_ESTest extends UrlValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator((-1564L));
      urlValidator0.isValidFragment("https");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator(",M9eoB`;eYbmRFCE", false);
      UrlValidator urlValidator0 = new UrlValidator(regexValidator0, 1L);
      urlValidator0.countToken("consulting", "6");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator();
      // Undeclared exception!
      try { 
        urlValidator0.countToken((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.UrlValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[7];
      RegexValidator regexValidator0 = new RegexValidator("mk", false);
      UrlValidator urlValidator0 = null;
      try {
        urlValidator0 = new UrlValidator(stringArray0, regexValidator0, 4L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.UrlValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[2];
      UrlValidator urlValidator0 = null;
      try {
        urlValidator0 = new UrlValidator(stringArray0, 750L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.UrlValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[5];
      UrlValidator urlValidator0 = null;
      try {
        urlValidator0 = new UrlValidator(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.UrlValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator(",M9eoB`;eYbmRFCE", false);
      UrlValidator urlValidator0 = new UrlValidator(regexValidator0, 1L);
      urlValidator0.isValidAuthority((String) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[5];
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerFirst("vOS=l]");
      RegexValidator regexValidator0 = new RegexValidator(linkedList0);
      LinkedList<DomainValidator.Item> linkedList1 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList1);
      UrlValidator urlValidator0 = new UrlValidator(stringArray0, regexValidator0, 4313L, domainValidator0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[4];
      RegexValidator regexValidator0 = new RegexValidator("'fp3XgSZ-*M");
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      UrlValidator urlValidator0 = null;
      try {
        urlValidator0 = new UrlValidator(stringArray0, regexValidator0, (-1076L), domainValidator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.UrlValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator("https");
      DomainValidator domainValidator0 = DomainValidator.getInstance(false);
      UrlValidator urlValidator0 = new UrlValidator((String[]) null, regexValidator0, (-1564L), domainValidator0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[0];
      UrlValidator urlValidator0 = new UrlValidator(stringArray0, 524L);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator();
      urlValidator0.isValidScheme("https");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator();
      urlValidator0.isValidScheme("tunes");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator(",M9eoB`;eYbmRFCE", false);
      UrlValidator urlValidator0 = new UrlValidator(regexValidator0, 1L);
      urlValidator0.isValidScheme(",M9eoB`;eYbmRFCE");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator();
      urlValidator0.isValidQuery((String) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[0];
      RegexValidator regexValidator0 = new RegexValidator("https", false);
      UrlValidator urlValidator0 = new UrlValidator(stringArray0, regexValidator0, 3699L);
      urlValidator0.isValidQuery("9XPDV;Y2Lat9");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator(",M9eoB`;eYbmRFCE", false);
      UrlValidator urlValidator0 = new UrlValidator(regexValidator0, 1L);
      urlValidator0.isValidPath(",M9eoB`;eYbmRFCE");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator();
      urlValidator0.isValidPath((String) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator();
      urlValidator0.isValidFragment((String) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator();
      urlValidator0.isValidAuthority("");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator(",M9eoB`;eYbmRFCE", false);
      UrlValidator urlValidator0 = new UrlValidator(regexValidator0, 1L);
      urlValidator0.isValidAuthority("VZQ:WfDv");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator();
      urlValidator0.isValid("X9bKey");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[0];
      RegexValidator regexValidator0 = new RegexValidator("https", false);
      UrlValidator urlValidator0 = new UrlValidator(stringArray0, regexValidator0, 3699L);
      urlValidator0.isValid((String) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator();
      urlValidator0.isValid("}a8+EOf>+c`");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[4];
      RegexValidator regexValidator0 = new RegexValidator("/../", true);
      UrlValidator urlValidator0 = new UrlValidator(stringArray0, regexValidator0, 1187L);
      urlValidator0.isValidPath("");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator();
      // Undeclared exception!
      urlValidator0.countToken("", "}a8+EOf>+c`");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[6];
      RegexValidator regexValidator0 = new RegexValidator("https", true);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true);
      UrlValidator urlValidator0 = null;
      try {
        urlValidator0 = new UrlValidator(stringArray0, regexValidator0, 4L, domainValidator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DomainValidator disagrees with ALLOW_LOCAL_URLS setting
         //
         verifyException("org.apache.commons.validator.routines.UrlValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[7];
      RegexValidator regexValidator0 = new RegexValidator("qa");
      UrlValidator urlValidator0 = null;
      try {
        urlValidator0 = new UrlValidator(stringArray0, regexValidator0, (-1L), (DomainValidator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DomainValidator must not be null
         //
         verifyException("org.apache.commons.validator.routines.UrlValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "arte";
      stringArray0[1] = "arte";
      RegexValidator regexValidator0 = new RegexValidator(stringArray0);
      UrlValidator urlValidator0 = new UrlValidator(regexValidator0, (-1761L));
      boolean boolean0 = urlValidator0.isValidAuthority("arte");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator();
      boolean boolean0 = urlValidator0.isValidPath("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator(",M9eoB`;eYbmRFCE", false);
      UrlValidator urlValidator0 = new UrlValidator(regexValidator0, 1L);
      boolean boolean0 = urlValidator0.isValid("VZQ:WfDv");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UrlValidator urlValidator0 = UrlValidator.getInstance();
      // Undeclared exception!
      try { 
        urlValidator0.isValidAuthority("?:");
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match found
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[0];
      UrlValidator urlValidator0 = new UrlValidator(stringArray0);
      int int0 = urlValidator0.countToken("Y;LCHyj-PNHJ *mB", "Y;LCHyj-PNHJ *mB");
      assertEquals(1, int0);
  }
}
