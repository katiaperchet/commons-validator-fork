/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 07 17:19:28 GMT 2024
 */

package org.apache.commons.validator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.List;
import java.util.Map;
import org.apache.commons.collections.FastHashMap;
import org.apache.commons.validator.Field;
import org.apache.commons.validator.Form;
import org.apache.commons.validator.FormSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FormSet_ESTest extends FormSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.addConstant("/gh*0,'Yz", "%l}*r8mA");
      assertNull(formSet0.getCountry());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      FastHashMap fastHashMap0 = new FastHashMap(0);
      formSet0.process(fastHashMap0);
      boolean boolean0 = formSet0.isProcessed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setVariant("~g@Bmk:YCm+_[#");
      String string0 = formSet0.getVariant();
      assertEquals("~g@Bmk:YCm+_[#", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setVariant("");
      String string0 = formSet0.getVariant();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setLanguage("BZs!Z4A");
      String string0 = formSet0.getLanguage();
      assertEquals("BZs!Z4A", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setLanguage("");
      String string0 = formSet0.getLanguage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      Form form0 = new Form();
      form0.inherit = "  country=";
      formSet0.addForm(form0);
      Form form1 = formSet0.getForm((String) null);
      assertFalse(form1.isProcessed());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      Form form0 = new Form();
      formSet0.addForm(form0);
      Form form1 = formSet0.getForm((String) null);
      assertNull(form1.getName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setCountry("0x`#cKVj+");
      String string0 = formSet0.getCountry();
      assertEquals("0x`#cKVj+", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setCountry("");
      String string0 = formSet0.getCountry();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      Form form0 = new Form();
      form0.lFields = null;
      formSet0.addForm(form0);
      // Undeclared exception!
      try { 
        formSet0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.Form", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      Form form0 = new Form();
      Field field0 = new Field();
      form0.addField(field0);
      formSet0.addForm(form0);
      // Undeclared exception!
      try { 
        formSet0.process((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      Form form0 = new Form();
      formSet0.addForm(form0);
      Field field0 = new Field();
      form0.addField(field0);
      // Undeclared exception!
      try { 
        formSet0.merge(formSet0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      Form form0 = new Form();
      formSet0.addForm(form0);
      List<Field> list0 = form0.getFields();
      form0.lFields = list0;
      // Undeclared exception!
      try { 
        formSet0.merge(formSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      // Undeclared exception!
      try { 
        formSet0.addForm((Form) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.FormSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setCountry("Constant '");
      formSet0.setVariant("0");
      String string0 = formSet0.displayKey();
      assertEquals("country=Constant ', variant=0", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setVariant("~g@Bmk:YCm+_[#");
      String string0 = formSet0.displayKey();
      assertEquals("variant=~g@Bmk:YCm+_[#", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setCountry("b");
      String string0 = formSet0.displayKey();
      assertEquals("country=b", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setLanguage("");
      String string0 = formSet0.displayKey();
      assertEquals("default", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      Map<String, Form> map0 = formSet0.getForms();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      String string0 = formSet0.getCountry();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      String string0 = formSet0.getVariant();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      String string0 = formSet0.getLanguage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      Form form0 = new Form();
      formSet0.addForm(form0);
      String string0 = formSet0.toString();
      assertEquals("FormSet: language=null  country=null  variant=null\n   Form: null\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      Form form0 = new Form();
      formSet0.addForm(form0);
      formSet0.process((Map<String, String>) null);
      formSet0.getForm((String) null);
      assertTrue(formSet0.isProcessed());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      FormSet formSet1 = new FormSet();
      Form form0 = new Form();
      formSet1.addForm(form0);
      formSet0.merge(formSet1);
      assertNotSame(formSet1, formSet0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.merge(formSet0);
      boolean boolean0 = formSet0.isMerged();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.merge((FormSet) null);
      assertFalse(formSet0.isProcessed());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setLanguage("");
      int int0 = formSet0.getType();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setCountry("tjyW>RQ<6lKz!6");
      formSet0.setLanguage("");
      int int0 = formSet0.getType();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setCountry("tjyW>RQ<6lKz!6");
      // Undeclared exception!
      try { 
        formSet0.getType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // When country is specified, language must be specified.
         //
         verifyException("org.apache.commons.validator.FormSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setVariant("FormSet: language=null  country=null  variant=null\n");
      formSet0.setLanguage("FormSet: language=null  country=null  variant=null\n");
      // Undeclared exception!
      try { 
        formSet0.getType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // When variant is specified, country and language must be specified.
         //
         verifyException("org.apache.commons.validator.FormSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setVariant("FormSet: language=null  country=null  variant=null\n");
      // Undeclared exception!
      try { 
        formSet0.getType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // When variant is specified, country and language must be specified.
         //
         verifyException("org.apache.commons.validator.FormSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setVariant("FormSet: language=null  country=null  variant=null\n");
      formSet0.setLanguage("FormSet: language=null  country=null  variant=null\n");
      formSet0.addConstant("FormSet: language=null  country=null  variant=null\n", "FormSet: language=null  country=null  variant=null\n");
      formSet0.addConstant("FormSet: language=null  country=null  variant=null\n", "FormSet: language=null  country=null  variant=null\n");
      assertEquals("FormSet: language=null  country=null  variant=null\n", formSet0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setVariant("");
      String string0 = formSet0.displayKey();
      assertEquals("default", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setCountry("Constant '");
      formSet0.setLanguage("0");
      String string0 = formSet0.displayKey();
      assertEquals("language=0, country=Constant '", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setCountry("");
      String string0 = formSet0.displayKey();
      assertEquals("default", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      Form form0 = new Form();
      formSet0.addForm(form0);
      formSet0.setLanguage("");
      formSet0.addForm(form0);
      assertEquals("", formSet0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.addConstant((String) null, (String) null);
      formSet0.addConstant((String) null, "n(;r?Wlc6T3:q_");
      assertNull(formSet0.getVariant());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      boolean boolean0 = formSet0.isProcessed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setLanguage("");
      formSet0.setCountry("FormSet: language=null  country=null  variant=null\n");
      formSet0.setVariant("");
      int int0 = formSet0.getType();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      boolean boolean0 = formSet0.isMerged();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      Form form0 = formSet0.getForm((String) null);
      assertNull(form0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      int int0 = formSet0.getType();
      assertEquals(1, int0);
  }
}
