/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 07 17:32:54 GMT 2024
 */

package org.apache.commons.validator.routines;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.regex.PatternSyntaxException;
import org.apache.commons.validator.routines.IBANValidator;
import org.apache.commons.validator.routines.RegexValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IBANValidator_ESTest extends IBANValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      IBANValidator.Validator iBANValidator_Validator0 = iBANValidator0.setValidator("LY", (-3195), "AX");
      assertNotNull(iBANValidator_Validator0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      // Undeclared exception!
      try { 
        iBANValidator0.setValidator("gr`;[%$iYj<RcLtR>Q", 0, "a");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      boolean boolean0 = iBANValidator0.isValid("SMSMd{2}[A-Z]{1}d{10}[A-Z0-9]{12}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IBANValidator.Validator[] iBANValidator_ValidatorArray0 = new IBANValidator.Validator[0];
      IBANValidator iBANValidator0 = new IBANValidator(iBANValidator_ValidatorArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      IBANValidator.Validator iBANValidator_Validator0 = iBANValidator0.setValidator("DO", (-155), "DO");
      IBANValidator.Validator iBANValidator_Validator1 = iBANValidator0.setValidator(iBANValidator_Validator0);
      assertNull(iBANValidator_Validator1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      IBANValidator.Validator iBANValidator_Validator0 = iBANValidator0.getValidator("NC");
      IBANValidator.Validator iBANValidator_Validator1 = iBANValidator0.setValidator(iBANValidator_Validator0);
      assertSame(iBANValidator_Validator1, iBANValidator_Validator0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      // Undeclared exception!
      try { 
        iBANValidator0.setValidator("PS", 13, "KS(JtsIs5wRx");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 12\r
         // PS(JtsIs5wRx
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      // Undeclared exception!
      try { 
        iBANValidator0.setValidator("XK", 59, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.IBANValidator$Validator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      // Undeclared exception!
      try { 
        iBANValidator0.setValidator((IBANValidator.Validator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.IBANValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      IBANValidator.Validator iBANValidator_Validator0 = iBANValidator0.getValidator((String) null);
      assertNull(iBANValidator_Validator0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[0];
      IBANValidator.Validator iBANValidator_Validator0 = null;
      try {
        iBANValidator_Validator0 = new IBANValidator.Validator("BG", (-12), "BG", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid length parameter, must be in range 8 to 34 inclusive: -12
         //
         verifyException("org.apache.commons.validator.routines.IBANValidator$Validator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[3];
      IBANValidator.Validator iBANValidator_Validator0 = null;
      try {
        iBANValidator_Validator0 = new IBANValidator.Validator("-/", 1533, "|f1q?[xbrdXKo&o", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid country Code; must be exactly 2 upper-case characters
         //
         verifyException("org.apache.commons.validator.routines.IBANValidator$Validator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[0];
      IBANValidator.Validator iBANValidator_Validator0 = null;
      try {
        iBANValidator_Validator0 = new IBANValidator.Validator("A)", 38, "5S + ", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid country Code; must be exactly 2 upper-case characters
         //
         verifyException("org.apache.commons.validator.routines.IBANValidator$Validator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[1];
      IBANValidator.Validator iBANValidator_Validator0 = null;
      try {
        iBANValidator_Validator0 = new IBANValidator.Validator("sP6}feOM", 0, "sP6}feOM", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid country Code; must be exactly 2 upper-case characters
         //
         verifyException("org.apache.commons.validator.routines.IBANValidator$Validator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IBANValidator.Validator[] iBANValidator_ValidatorArray0 = new IBANValidator.Validator[2];
      IBANValidator iBANValidator0 = null;
      try {
        iBANValidator0 = new IBANValidator(iBANValidator_ValidatorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.IBANValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      IBANValidator.Validator iBANValidator_Validator0 = iBANValidator0.getValidator("");
      IBANValidator iBANValidator1 = IBANValidator.getInstance();
      // Undeclared exception!
      try { 
        iBANValidator1.setValidator(iBANValidator_Validator0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The singleton validator cannot be modified
         //
         verifyException("org.apache.commons.validator.routines.IBANValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      IBANValidator.Validator iBANValidator_Validator0 = iBANValidator0.setValidator("PS", 13, "PS");
      assertNotNull(iBANValidator_Validator0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      IBANValidator.Validator iBANValidator_Validator0 = iBANValidator0.setValidator("SCSCd{2}[A-Z]{4}d{20}[A-Z]{3}", (-162), "SCSCd{2}[A-Z]{4}d{20}[A-Z]{3}");
      assertNull(iBANValidator_Validator0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IBANValidator iBANValidator0 = IBANValidator.DEFAULT_IBAN_VALIDATOR;
      // Undeclared exception!
      try { 
        iBANValidator0.setValidator((String) null, 78, (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The singleton validator cannot be modified
         //
         verifyException("org.apache.commons.validator.routines.IBANValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      boolean boolean0 = iBANValidator0.isValid("QAQAd{2}[A-Z]{4}[A-Z0-9]{21}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IBANValidator iBANValidator0 = IBANValidator.getInstance();
      boolean boolean0 = iBANValidator0.hasValidator("KWKWd{2}[A-Z]{4}[A-Z0-9]{22}");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      boolean boolean0 = iBANValidator0.hasValidator("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IBANValidator iBANValidator0 = IBANValidator.getInstance();
      boolean boolean0 = iBANValidator0.DEFAULT_IBAN_VALIDATOR.isValid((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[7];
      IBANValidator.Validator iBANValidator_Validator0 = new IBANValidator.Validator("BG", 8, "BG", stringArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IBANValidator.Validator iBANValidator_Validator0 = null;
      try {
        iBANValidator_Validator0 = new IBANValidator.Validator("BG", (-1117), "BG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid length parameter, must be in range 8 to 34 inclusive: -1117
         //
         verifyException("org.apache.commons.validator.routines.IBANValidator$Validator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IBANValidator.Validator iBANValidator_Validator0 = new IBANValidator.Validator("BG", 8, "BG");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      // Undeclared exception!
      try { 
        iBANValidator0.setValidator("P!", 25, "P!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid country Code; must be exactly 2 upper-case characters
         //
         verifyException("org.apache.commons.validator.routines.IBANValidator$Validator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[5];
      IBANValidator.Validator iBANValidator_Validator0 = null;
      try {
        iBANValidator_Validator0 = new IBANValidator.Validator("MR", 1552, "KWKWd{2}[A-Z]{4}[A-Z0-9]{22}", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid length parameter, must be in range 8 to 34 inclusive: 1552
         //
         verifyException("org.apache.commons.validator.routines.IBANValidator$Validator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      IBANValidator.Validator iBANValidator_Validator0 = iBANValidator0.getValidator("SAJe,|T{+");
      RegexValidator regexValidator0 = iBANValidator_Validator0.getRegexValidator();
      assertNotNull(regexValidator0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IBANValidator iBANValidator0 = IBANValidator.getInstance();
      IBANValidator.Validator[] iBANValidator_ValidatorArray0 = iBANValidator0.getDefaultValidators();
      assertEquals(82, iBANValidator_ValidatorArray0.length);
  }
}
