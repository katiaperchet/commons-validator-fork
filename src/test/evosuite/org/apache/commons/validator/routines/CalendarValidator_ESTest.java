/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 07 18:09:16 GMT 2024
 */

package org.apache.commons.validator.routines;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DateFormatSymbols;
import java.text.Format;
import java.text.NumberFormat;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.validator.routines.CalendarValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CalendarValidator_ESTest extends CalendarValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.CHINA;
      calendarValidator0.validate("", "Greenwich Mean Time", locale0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, (-1333));
      calendarValidator0.validate("14/02/14", (Locale) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      calendarValidator0.validate("#", "#", timeZone0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Locale locale0 = Locale.FRANCE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      calendarValidator0.validate("!$8", "!$8", locale0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.forLanguageTag("");
      calendarValidator0.validate("}", "}", locale0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      calendarValidator0.validate("_@Q{;}STMkog>)+j{", (String) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      calendarValidator0.processParsedValue(mockSimpleDateFormat0, mockSimpleDateFormat0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = new Locale("", "", "");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-2035), 5, 3025);
      calendarValidator0.compareYears(calendar0, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "@}`WXq;Tq%Dx<j", 1, 1, 0, 3, (-3325), 0, (-3325), (-2475));
      CalendarValidator calendarValidator0 = new CalendarValidator(true, (-1697));
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(simpleTimeZone0);
      calendarValidator0.compareYears(mockGregorianCalendar0, mockGregorianCalendar1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1292, 12, 11, 1, (-1452), (-1452));
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(11, 11, 11);
      calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      MockDate mockDate0 = new MockDate(0, 0, 2, (-2033), 2, (-2033));
      mockSimpleDateFormat0.set2DigitYearStart(mockDate0);
      calendarValidator0.compareWeeks(calendar0, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Locale locale0 = new Locale("p:<TLZ.?&RW7*", "org.apache.commons.validator.routines.CalendarValidator");
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      calendarValidator0.compareQuarters(calendar0, calendar0, 2623);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 3, 3, 3, 3, 5);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar1, (Calendar) mockGregorianCalendar0, 862);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      MockDate mockDate0 = new MockDate(0, 0, 2, (-2033), 2, (-2033));
      mockSimpleDateFormat0.set2DigitYearStart(mockDate0);
      calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, (-1));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      calendarValidator0.compareQuarters((Calendar) gregorianCalendar0, (Calendar) gregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = new Locale("", "", "");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-2035), 5, 3025);
      calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Locale locale0 = new Locale("p:<TLZ.?&RW7*", "org.apache.commons.validator.routines.CalendarValidator");
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      calendarValidator0.compareMonths(calendar0, calendar0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 1);
      Locale locale0 = Locale.KOREA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      System.setCurrentTimeMillis(1074L);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      calendarValidator0.compareMonths(mockGregorianCalendar0, calendar0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, (-2475));
      Calendar calendar0 = MockCalendar.getInstance();
      calendarValidator0.compareMonths(mockGregorianCalendar0, calendar0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1, 1, 1);
      calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, (-2475));
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-2475), (-3325), 0, (-1061), 0, 0);
      calendarValidator0.compareDates(mockGregorianCalendar1, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2459, 2459, 2459, 2459, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      calendarValidator0.compareDates(calendar0, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 2217);
      TimeZone timeZone0 = TimeZone.getTimeZone("cYsK");
      // Undeclared exception!
      try { 
        calendarValidator0.validate("75:(#ke%", timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 2217
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 1514);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        calendarValidator0.validate("|u;7l6*;z?rVhVkLP.d", locale0, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1514
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 1840);
      Locale locale0 = Locale.ITALY;
      // Undeclared exception!
      try { 
        calendarValidator0.validate("v=c{jigPWQP\"(N+I,?N", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1840
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, (-1333));
      // Undeclared exception!
      try { 
        calendarValidator0.validate("org.apache.commons.validator.routines.AbstractFormatValidator", "org.apache.commons.validator.routines.AbstractFormatValidator", (TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'o'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Locale locale0 = Locale.forLanguageTag("y{wamOgT.");
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        calendarValidator0.validate(",g", "y{wamOgT.", locale0, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'O'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        calendarValidator0.validate("fg0bF~YT2Vop", "fg0bF~YT2Vop", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'f'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 6);
      // Undeclared exception!
      try { 
        calendarValidator0.validate("E}o4kNqD5UmE&.8P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 6
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(857, 857, 857);
      // Undeclared exception!
      try { 
        calendarValidator0.processParsedValue(mockGregorianCalendar0, (Format) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.CalendarValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 1840);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1840, 1840, 1840, 1840, 1840, 1840);
      // Undeclared exception!
      try { 
        calendarValidator0.compareYears((Calendar) null, mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractCalendarValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      // Undeclared exception!
      try { 
        calendarValidator0.compareWeeks((Calendar) null, (Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractCalendarValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.set(0, 1979);
      CalendarValidator calendarValidator0 = new CalendarValidator();
      // Undeclared exception!
      try { 
        calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(148, "w?_YeMD");
      // Undeclared exception!
      try { 
        CalendarValidator.adjustToTimeZone((Calendar) null, simpleTimeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.CalendarValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      TimeZone timeZone0 = TimeZone.getDefault();
      CalendarValidator.adjustToTimeZone(mockGregorianCalendar0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Locale locale0 = new Locale("p:<TLZ.?&RW7*", "org.apache.commons.validator.routines.CalendarValidator");
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2623, "org.apache.commons.validator.routines.CalendarValidator");
      CalendarValidator.adjustToTimeZone(calendar0, simpleTimeZone0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=org.apache.commons.validator.routines.CalendarValidator,offset=2623,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Calendar calendar0 = calendarValidator0.validate("org.apache.commons.validator.routines.AbstractCalendarValidator");
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, (-2475));
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = new Locale("", "", "");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      // Undeclared exception!
      try { 
        calendarValidator0.compareQuarters((Calendar) null, calendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractCalendarValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2623, "org.apache.commons.validator.routines.CalendarValidator");
      Calendar calendar0 = calendarValidator0.validate((String) null, "p:<TLZ.?&RW7*", (TimeZone) simpleTimeZone0);
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      NumberFormat numberFormat0 = mockSimpleDateFormat0.getNumberFormat();
      // Undeclared exception!
      try { 
        calendarValidator0.processParsedValue(mockGregorianCalendar0, numberFormat0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.text.DecimalFormat cannot be cast to java.text.DateFormat
         //
         verifyException("org.apache.commons.validator.routines.CalendarValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Locale locale0 = new Locale("p:<TLZ.?&RW7*", "org.apache.commons.validator.routines.CalendarValidator");
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      int int0 = calendarValidator0.compareYears(calendar0, calendar0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      // Undeclared exception!
      try { 
        calendarValidator0.compareDates((Calendar) null, (Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractCalendarValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      // Undeclared exception!
      try { 
        calendarValidator0.validate("org.apache.commons.validator.routines.AbstractFormatValidator", "!#^2^A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'A'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      // Undeclared exception!
      try { 
        calendarValidator0.compareMonths((Calendar) null, (Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractCalendarValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = calendarValidator0.validate((String) null, locale0, timeZone0);
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Calendar calendar0 = calendarValidator0.validate("", timeZone0);
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Locale locale0 = Locale.ITALY;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Calendar calendar0 = calendarValidator0.validate("", "", locale0, timeZone0);
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      // Undeclared exception!
      try { 
        calendarValidator0.compareQuarters((Calendar) null, (Calendar) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractCalendarValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.CHINESE;
      Calendar calendar0 = calendarValidator0.validate("", locale0);
      assertNull(calendar0);
  }
}
